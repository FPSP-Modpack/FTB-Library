def project_dir = "/home/jason/dev/mc/ftb/FTB-Library"

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'curseforge'

file "build.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

//def version_mod = version_mods;
def version_mc = "${config.version_mc}"
def version_mod = "${config.version_mc}-${config.version_mod}"
group = "latmod.ftblib"
archivesBaseName = "FTBLib"

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
	sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${config.version_mc}-${config.version_forge}"
    runDir = "run"

    replace "@VERSION@", version_mod
    replaceIn "FTBLibFinals.java"
}

// dependencies {
//    compile fileTree(dir: project_dir + "DevMods/", include: '*.jar')
//}



sourceSets {
    main {
        java {
            srcDir project_dir + archivesBaseName + "/src/main/java"
            srcDir project_dir + "../LatLib/src"
        }
        resources {
            srcDir project_dir + archivesBaseName + "/src/main/resources"
        }
        output.resourcesDir = output.classesDir
    }
}

tasks.withType(Jar) {
    destinationDir = file(project_dir + "/Exported/")
}

processResources
        {
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

task sourceJar(type: Jar) {
    from sourceSets.main.java
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

build.dependsOn deobfJar
build.dependsOn sourceJar
